trigger:
- main

variables:
  dockerRegistryServiceConnection: 'container1'
  imageRepository: 'maheshbmahesh/azure-backend'
  containerRegistry: 'Mahesh.azurecr.io'
  dockerfilePath: 'backend/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acr-secret-cred'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    displayName: Building image and pushing to ACR
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and Push Image üê≥
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS Kubernetes
    pool:
      vmImage: $(vmImageName)
    environment:
      name: 'cynnentpoc-environment'
      resourceType: Kubernetes
      # Optional: If you already connected AKS to DevOps Environment, specify resource name:
      # resourceName: 'your-aks-connection-name'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy Manifests üöÄ
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
              imagePullSecrets: |
                $(imagePullSecret)
