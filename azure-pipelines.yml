trigger:
  branches:
    include:
      - main

variables:
  ACR_NAME: backendazure
  ACR_LOGIN: backendazure.azurecr.io
  IMAGE_NAME: backend
  TAG: $(Build.BuildId)
  RESOURCE_GROUP: aks-rg
  AKS_NAME: Backend-cluster

pool:
  vmImage: ubuntu-latest

steps:

# Login Azure via ARM connection for AKS & ACR permissions
- task: AzureCLI@2
  displayName: Login to Azure
  inputs:
    azureSubscription: docker-connection1
    scriptType: bash
    inlineScript: |
      echo "‚úÖ Azure Login Successful"
      az acr login --name $ACR_NAME

# Build Docker image locally
- task: Bash@3
  displayName: Build Docker Image
  inputs:
    targetType: inline
    script: |
      echo "üê≥ Building Docker image..."
      docker build -t $ACR_LOGIN/$IMAGE_NAME:$TAG backend/

# Push image to ACR using Docker registry connection
- task: Docker@2
  displayName: Push Image to ACR
  inputs:
    command: push
    containerRegistry: repo
    repository: $(IMAGE_NAME)
    tags: |
      $(TAG)

# Get AKS credentials
- task: AzureCLI@2
  displayName: Connect to AKS
  inputs:
    azureSubscription: docker-connection1
    scriptType: bash
    inlineScript: |
      echo "üîë Fetching AKS Credentials"
      az aks get-credentials -g $RESOURCE_GROUP -n $AKS_NAME --overwrite-existing

# Deploy app to AKS
- task: Kubernetes@1
  displayName: Deploy to AKS
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: docker-connection1
    azureResourceGroup: $(RESOURCE_GROUP)
    kubernetesCluster: $(AKS_NAME)
    command: apply
    useConfigurationFile: true
    configuration: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: backend
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: backend
        template:
          metadata:
            labels:
              app: backend
          spec:
            containers:
            - name: backend
              image: $(ACR_LOGIN)/$(IMAGE_NAME):$(TAG)
              ports:
              - containerPort: 80
