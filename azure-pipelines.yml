# Build, scan and push Docker image to Azure Container Registry

trigger:
  - main

resources:
  - repo: self

variables:
  dockerRegistryServiceConnection: 'container1'
  imageRepository: 'testfouridspoc'
  containerRegistry: 'mahesh.azurecr.io'
  dockerfilePath: 'backend/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:

# ======== BUILD & PUSH IMAGE =========
- stage: Build
  displayName: "Build, Scan & Push"
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)

    steps:

    # Build Java Application
    - task: Maven@4
      displayName: "Build Maven Artifact"
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install -DskipTests=true'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'

    # Login to ACR
    - task: Docker@2
      displayName: "Login to ACR"
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    # Build Docker image
    - task: Docker@2
      displayName: "Build Docker Image"
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    # Install Trivy
    - task: Bash@3
      displayName: "Install Trivy"
      inputs:
        targetType: inline
        script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

    # Trivy Scan
    - task: Bash@3
      displayName: "Scan Image with Trivy"
      inputs:
        targetType: inline
        script: |
          ./bin/trivy image \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          $(containerRegistry)/$(imageRepository):$(tag)

    # Push Docker image
    - task: Docker@2
      displayName: "Push Image to ACR"
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    # Publish deployment manifests (K8s YAML)
    - publish: manifests
      artifact: manifests

# ======== DEPLOY TO AKS (placeholder for now) =========
- stage: Deploy
  displayName: "Deploy to AKS"
  dependsOn: Build
  condition: succeeded()
  jobs:
    - job: Deploy
      displayName: "Deploy to Kubernetes"
      steps:
      - script: echo "Deployment steps will be added soon..."
