trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'container1'
  containerRegistry: 'mahesh.azurecr.io'
  imageRepository: 'testfouridspoc'
  dockerfilePath: 'backend/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  imagePullSecret: 'testfourids-auth'

stages:

# ============================================================
# ‚õèÔ∏è Build + Scan + Push Stage
# ============================================================
- stage: Build
  displayName: "Build and Push Image"
  jobs:
  - job: BuildJob
    displayName: "Build, Scan and Push"
    pool:
      vmImage: $(vmImageName)
    steps:

    # ‚úÖ Build JAR using Maven
    - task: Maven@4
      displayName: "Build Maven Project"
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install -DskipTests=true'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'

    # ‚úÖ Build Docker Image with ACR repository path
    - task: Docker@2
      displayName: "Build Docker Image"
      inputs:
        command: build
        repository: $(containerRegistry)/$(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    # ‚úÖ Install Trivy
    - task: Bash@3
      displayName: "Install Trivy"
      inputs:
        targetType: inline
        script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

    # ‚úÖ Scan local Docker Image
    - task: Bash@3
      displayName: "Trivy Scan Image"
      inputs:
        targetType: inline
        script: |
          ./bin/trivy image \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          $(containerRegistry)/$(imageRepository):$(tag)

    # ‚úÖ Push Image to ACR
    - task: Docker@2
      displayName: "Push Docker Image to ACR"
      inputs:
        command: push
        repository: $(containerRegistry)/$(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    # ‚úÖ Publish Kubernetes manifests as artifact for Deploy Stage
    - publish: manifests
      artifact: manifests

# ============================================================
# üöÄ Deploy Stage (AKS Deployment)
# ============================================================
- stage: Deploy
  displayName: "Deploy to AKS"
  dependsOn: Build
  jobs:
  - deployment: DeployJob
    displayName: "Deploy App to AKS"
    pool:
      vmImage: $(vmImageName)
    environment: 'TestFourids'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: "Deploy Manifests to AKS"
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/*.yaml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
              imagePullSecrets: |
                $(imagePullSecret)
              kubernetesServiceConnection: 'aks-service-connection'
              namespace: 'default'
