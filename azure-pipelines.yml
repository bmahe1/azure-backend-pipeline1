trigger:
- main

# Variables
variables:
  # Docker + ACR
  dockerRegistryServiceConnection: 'repo'
  containerRegistry: 'backendazure.azurecr.io'
  imageRepository: 'backendazure'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # AKS Deploy Config
  aksSubscriptionServiceConnection: 'docker-connection1'
  aksResourceGroup: 'Backend-RG'
  aksCluster: 'Backend-cluster'
  namespace: 'production'

  vmImageName: 'ubuntu-latest'

stages:

####################################
# Stage 1: Build + Trivy + Push ACR
####################################
- stage: Build
  displayName: Build, Scan and Push Container
  jobs:
  - job: BuildAndScan
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: Maven@4
      displayName: "Build Java App"
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'

    - task: Docker@2
      displayName: "üê≥ Build Docker Image"
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Bash@3
      displayName: "üîç Install Trivy"
      inputs:
        targetType: inline
        script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

    - task: Bash@3
      displayName: "üõ° Run Trivy Scan"
      inputs:
        targetType: inline
        script: |
          ./bin/trivy image --severity HIGH,CRITICAL --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)

    - task: Docker@2
      displayName: "üöÄ Push to ACR"
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: deployment
      artifact: src

####################################
# Stage 2: Deploy to AKS via Script
####################################
- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    pool:
      vmImage: $(vmImageName)
    environment: 'Backend-cluster'

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: src

          - task: AzureCLI@2
            displayName: "‚õµ Deploy to AKS"
            inputs:
              azureSubscription: $(aksSubscriptionServiceConnection)
              scriptLocation: inlineScript
              inlineScript: |
                echo "üìå Getting AKS Credentials"
                az aks get-credentials \
                  --resource-group $(aksResourceGroup) \
                  --name $(aksCluster) \
                  --overwrite-existing
                
                echo "üìå Ensure namespace exists"
                kubectl create namespace $(namespace) --dry-run=client -o yaml | kubectl apply -f -

                chmod +x $(Pipeline.Workspace)/src/deployment/scripts/deploy.sh

                IMAGE="$(containerRegistry)/$(imageRepository):$(tag)"
                NS="$(namespace)"

                echo "üöö Deploying image: $IMAGE"
                $(Pipeline.Workspace)/src/deployment/scripts/deploy.sh "$IMAGE" "$NS"

                echo "‚úÖ Deployment triggered successfully"
