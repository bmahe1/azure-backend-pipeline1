trigger:
- main

variables:
  dockerRegistryServiceConnection: 'repo'
  aksServiceConnection: 'docker-connection1'
  containerRegistry: 'backendazure.azurecr.io'
  imageRepository: 'backend'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:

# ------------------------ BUILD & PUSH ------------------------
- stage: Build
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: Docker@2
      displayName: 🛠 Build Docker Image
      inputs:
        command: build
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)

    - task: Bash@3
      displayName: 🔍 Install Trivy
      inputs:
        targetType: inline
        script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

    - task: Bash@3
      displayName: 🛡 Trivy Scan Image
      inputs:
        targetType: inline
        script: |
          ./bin/trivy image --severity HIGH,CRITICAL $(containerRegistry)/$(imageRepository):$(tag) || true

    - task: Docker@2
      displayName: 🚀 Push to ACR
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - publish: deployment
      artifact: manifests


# ------------------------ DEPLOY TO AKS ------------------------
- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy to Backend AKS Cluster
    environment: 'Backend-env'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: AzureCLI@2
            displayName: 🎟 Authenticate AKS
            inputs:
              azureSubscription: $(aksServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials --resource-group backendazure --name Backend-cluster --overwrite-existing

          - task: KubernetesManifest@0
            displayName: 🔑 Create Image Pull Secret
            inputs:
              action: createSecret
              secretName: acr-auth
              namespace: default
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: 🚀 Apply K8s Deployment & Service
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yaml
                $(Pipeline.Workspace)/manifests/service.yaml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
              imagePullSecrets: |
                acr-auth
