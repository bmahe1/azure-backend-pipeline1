# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
 
trigger:
- main
 
resources:
- repo: self
 
variables:
 
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'container1'
  imageRepository: 'testfouridspoc'
  containerRegistry: 'mahesh.azurecr.io'
  dockerfilePath: 'backend/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'testfourids-auth'
 
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
 
 
stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@4
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install -DskipTests=true'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      displayName: Build a Docker image 
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Bash@3
      displayName: "Install Trivy"
      inputs:
        targetType: inline
        script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
 # Run Trivy Scan
    - task: Bash@3
      displayName: "Run Trivy Scan"
      inputs:
        targetType: inline
        script: |
          ./bin/trivy image --severity HIGH,CRITICAL,MEDIUM --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
 
    - upload: manifests
      artifact: manifests
 
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
 
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'TestFourids'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: manifests
              path: $(Pipeline.Workspace)/manifests