trigger:
  branches:
    include:
      - main

variables:
  ACR_NAME: backendazure
  IMAGE_NAME: knowledgecity-backend
  TAG: $(Build.BuildId)
  AKS_CLUSTER: backend-aks
  AKS_RG: aks-rg

stages:

#------------------------------------------
# Stage 1: Build -> Scan -> Push to ACR
#------------------------------------------
- stage: Build
  displayName: "Build & Push Container"
  jobs:
  - job: BuildJob
    displayName: "Build Job"
    pool:
      vmImage: ubuntu-latest

    steps:
    - checkout: self

    - task: DockerInstaller@0
      displayName: "Install Docker"

    - task: Docker@2
      displayName: "Build Docker Image"
      inputs:
        command: build
        repository: $(ACR_NAME).azurecr.io/$(IMAGE_NAME)
        dockerfile: Dockerfile
        tags: |
          $(TAG)

    - bash: |
        echo "üõ° Running Trivy Scan..."
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -
        trivy image $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG) --severity HIGH,CRITICAL > trivy_report.txt || true
        
        if grep -q "CRITICAL" trivy_report.txt; then
          echo "‚ùå Critical vulnerabilities found"
          cat trivy_report.txt
          exit 1
        fi
        
        echo "‚úÖ Security check passed"
      displayName: "Trivy Scan"

    - task: Docker@2
      displayName: "Push Image to ACR"
      inputs:
        command: push
        repository: $(ACR_NAME).azurecr.io/$(IMAGE_NAME)
        tags: |
          $(TAG)

#------------------------------------------
# Stage 2: Deploy to AKS
#------------------------------------------
- stage: Deploy
  displayName: "Deploy to AKS"
  dependsOn: Build
  jobs:
  - job: DeployJob
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: KubectlInstaller@0
      displayName: "Install Kubectl"

    - task: Kubernetes@1
      displayName: "Deploy Latest Image"
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: "AKS-Service-Connection" # Confirm this name
        command: apply
        useConfigurationFile: false
        arguments: |
          set image deployment/backenddeploy backendcontainer=$(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG)
